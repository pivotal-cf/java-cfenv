import org.gradle.api.tasks.testing.TestDescriptor
import org.gradle.api.tasks.testing.TestOutputEvent
import org.gradle.api.tasks.testing.TestResult

import java.util.concurrent.ConcurrentHashMap

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'jacoco'
}

ext.javadocLinks = [
        "https://docs.oracle.com/javase/8/docs/api/",
] as String[]

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.links(project.ext.javadocLinks)
    options.addStringOption('Xdoclint:none', '-quiet')
}

checkstyle {
    configFile = file("${project.rootDir}/src/checkstyle/checkstyle.xml")
}

test {
    test.useJUnitPlatform()
}

afterEvaluate { Project project ->
    if (project.description == null || project.description.isEmpty()) {
        throw new InvalidUserDataException("A project description is required for publishing to maven central")
    }

    tasks.withType(Test).forEach { Test task ->
        task.with {
            def jmockit = classpath.find { it.name.contains("jmockit") }
            if (jmockit) {
                jvmArgs "-javaagent:${jmockit.absolutePath}"
            }

            testLogging {
                exceptionFormat = "full"
                events = ["passed", "skipped", "failed"]
                showStandardStreams = !project.onlyShowStandardStreamsOnTestFailure
            }

            if (project.onlyShowStandardStreamsOnTestFailure) {
                Map<String, StringBuilder> testOutput = new ConcurrentHashMap<>()

                onOutput { TestDescriptor descriptor, TestOutputEvent event ->
                    testOutput.compute(descriptor.displayName, { k, v ->
                        v == null ? new StringBuilder(event.message) : v.append(event.message)
                    })
                }

                afterTest { TestDescriptor descriptor, TestResult result ->
                    if (result.resultType == TestResult.ResultType.FAILURE && testOutput.containsKey(descriptor.displayName)) {
                        logger.lifecycle("\n\n${testOutput.get(descriptor.displayName)}")
                        testOutput.remove(descriptor.displayName)
                    }
                }
            }

            // print failed tests after the execution
            def failedTests = []
            afterTest { test, result ->
                if (result.resultType == TestResult.ResultType.FAILURE) {
                    failedTests << test
                }
            }

            // create a summary after the execution
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "\nTest result: ${result.resultType}"
                    println "Test summary: ${result.testCount} tests, " +
                            "${result.successfulTestCount} succeeded, " +
                            "${result.failedTestCount} failed, " +
                            "${result.skippedTestCount} skipped"

                    failedTests.each { test -> println "FAILED test: ${test.className} > ${test.name}" }
                }
            }
        }
    }
}

publishing {
    repositories {
        maven {
            url = project.properties.getOrDefault('publicationRepository', "${System.getenv('HOME')}/.m2/repository")
        }
    }
    publications {
        mavenJava(MavenPublication) {
            suppressAllPomMetadataWarnings()
            from components.java

            pom {
                afterEvaluate {
                    name = project.description
                    description = project.description
                }
                withXml {
                    def pomNode = asNode()
                    def dependencyManagementNode = pomNode.get('dependencyManagement')
                    if (dependencyManagementNode) pomNode.remove(dependencyManagementNode)
                }
            }

            // Published pom will use fully-qualified dependency versions and no BOMs
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                    if (project.configurations.findByName('testFixturesRuntimeClasspath')) {
                        fromResolutionOf('testFixturesRuntimeClasspath')
                    }
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}
